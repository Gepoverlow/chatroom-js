{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;AAA8B;AAC+B;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,uCAAI;AACzB;;AAEA;AACA;AACA;;AAEA;AACA,IAAI,yEAAc;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEoB;;;;;;;;;;;;;;;AC3CpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEmB;;;;;;;;;;;;;;;;ACZiB;;AAEpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wBAAwB,6CAAO;AAC/B,iDAAiD,gBAAgB,QAAQ,kBAAkB;AAC3F,qCAAqC,8CAA8C;AACnF;;AAEA;AACA,wBAAwB,6CAAO;AAC/B,mCAAmC,aAAa,IAAI,gBAAgB,QAAQ,kBAAkB;AAC9F,0CAA0C,wCAAwC;AAClF;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEgB;;;;;;;;;;;;;;;AC7ChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEyB;;;;;;;;;;;;;;;ACVzB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4BAA4B,SAAS;AACrC;AACA;;AAE0B;;;;;;;;;;;;;;;ACd1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAE6B;;;;;;;;;;;;;;;AC1B7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAE4B;;;;;;;;;;;;;;;;;;;AC/B4B;AACN;AACI;AACN;;AAEhD;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,EAAE,6DAAa;AACf,EAAE,mEAAgB;AAClB,EAAE,qEAAiB;AACnB,EAAE,+DAAc;AAChB;;AAE0B;;;;;;;UCpB1B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACN8C;;AAE9C;;AAEA;AACA;AACA;AACA;;AAEA,qBAAqB,uDAAQ;;AAE7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA,kCAAkC;;AAElC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA","sources":["webpack://chatroom_js/./src/classes/Chatroom.js","webpack://chatroom_js/./src/classes/Message.js","webpack://chatroom_js/./src/classes/User.js","webpack://chatroom_js/./src/dom-stuff/chatBoxRender.js","webpack://chatroom_js/./src/dom-stuff/chatLogoRender.js","webpack://chatroom_js/./src/dom-stuff/chatMessageRender.js","webpack://chatroom_js/./src/dom-stuff/chatOnlineRender.js","webpack://chatroom_js/./src/dom-stuff/chatRoomRender.js","webpack://chatroom_js/webpack/bootstrap","webpack://chatroom_js/webpack/runtime/define property getters","webpack://chatroom_js/webpack/runtime/hasOwnProperty shorthand","webpack://chatroom_js/webpack/runtime/make namespace object","webpack://chatroom_js/./src/index.js"],"sourcesContent":["import { User } from \"./User\";\nimport { renderChatroom } from \"../dom-stuff/chatRoomRender\";\n\nclass Chatroom {\n  #user;\n  #onlineUsers = [];\n  #roomName;\n  #isInitialized;\n  constructor(name) {\n    this.#user = undefined;\n    this.#roomName = name;\n  }\n\n  setUser(username, socket, fontColor) {\n    this.#user = new User(username, socket, fontColor);\n  }\n\n  getUser() {\n    return this.#user;\n  }\n\n  init() {\n    renderChatroom(this.#user.getUserName());\n    this.#isInitialized = true;\n  }\n\n  getIsInitialized() {\n    return this.#isInitialized;\n  }\n\n  setOnlineUsers(array) {\n    this.#onlineUsers = array;\n  }\n\n  getOnlineUsers() {\n    return this.#onlineUsers;\n  }\n\n  getRoomName() {\n    return this.#roomName;\n  }\n}\n\nexport { Chatroom };\n","class Message {\n  #text;\n\n  constructor(text) {\n    this.#text = text;\n  }\n\n  getText() {\n    return this.#text;\n  }\n}\n\nexport { Message };\n","import { Message } from \"./Message\";\n\nclass User {\n  #userName;\n  #socket;\n  #fontColor;\n\n  constructor(userName, socket, fontColor) {\n    this.#userName = userName;\n    this.#socket = socket;\n    this.#fontColor = fontColor;\n  }\n\n  getUserName() {\n    return this.#userName;\n  }\n\n  getSocket() {\n    return this.#socket;\n  }\n\n  sendMessageToGeneral(what) {\n    const message = new Message(what);\n    const composedMessage = `[to General-chat] ${this.#userName} said: ${message.getText()}`;\n    this.#socket.emit(\"sendToAll\", { msg: composedMessage, color: this.#fontColor });\n  }\n\n  sendMessageToPrivate(what, who) {\n    const message = new Message(what);\n    const composedMessage = `[to ${who.username}] ${this.#userName} said: ${message.getText()}`;\n    this.#socket.emit(\"privateMessage\", { msg: composedMessage, to: who.socketId });\n  }\n\n  logIn() {\n    this.#socket.emit(\"newUser\", {\n      username: this.#userName,\n      socketId: this.#socket.id,\n    });\n  }\n\n  getFontColor() {\n    return this.#fontColor;\n  }\n}\n\nexport { User };\n","function chatBoxRender(parent) {\n  const chatBox = document.createElement(\"div\");\n  chatBox.id = \"container-chatbox\";\n  parent.appendChild(chatBox);\n\n  const chatUl = document.createElement(\"ul\");\n  chatUl.id = \"chatbox-ul\";\n  chatBox.appendChild(chatUl);\n}\n\nexport { chatBoxRender };\n","function chatLogoRender(parent, username) {\n  const chatLogo = document.createElement(\"div\");\n  chatLogo.id = \"container-chatlogo\";\n  parent.appendChild(chatLogo);\n\n  const logo = document.createElement(\"h5\");\n  logo.textContent = `[USER]:`;\n  chatLogo.appendChild(logo);\n\n  const userSpan = document.createElement(\"span\");\n  userSpan.textContent = `${username}`;\n  chatLogo.appendChild(userSpan);\n}\n\nexport { chatLogoRender };\n","function chatMessageRender(parent) {\n  const chatMessage = document.createElement(\"div\");\n  chatMessage.id = \"container-chatmessage\";\n  parent.appendChild(chatMessage);\n\n  const chatMessageForm = document.createElement(\"form\");\n  chatMessageForm.id = \"message-form\";\n  chatMessageForm.className = \"form-inline\";\n  chatMessage.appendChild(chatMessageForm);\n\n  const chatMessageBox = document.createElement(\"div\");\n  chatMessageBox.className = \"input-group\";\n  chatMessageForm.appendChild(chatMessageBox);\n\n  const chatMessageInput = document.createElement(\"input\");\n  chatMessageInput.className = \"form-control\";\n  chatMessageInput.id = \"message-input\";\n  chatMessageBox.appendChild(chatMessageInput);\n\n  const chatMessageButton = document.createElement(\"button\");\n  chatMessageButton.className = \"btn btn-primary\";\n  chatMessageButton.id = \"submit-message-button\";\n  chatMessageButton.textContent = \"Submit Message\";\n  chatMessageBox.appendChild(chatMessageButton);\n}\n\nexport { chatMessageRender };\n","function chatOnlineRender(parent) {\n  const chatOnline = document.createElement(\"div\");\n  chatOnline.id = \"container-chatonline\";\n  parent.appendChild(chatOnline);\n\n  const currentRoomIndicator = document.createElement(\"h6\");\n  currentRoomIndicator.id = \"current-room-indicator\";\n  currentRoomIndicator.textContent = \"You are currently in room:\";\n  chatOnline.appendChild(currentRoomIndicator);\n\n  const currentRoom = document.createElement(\"h6\");\n  currentRoom.id = \"current-room\";\n  currentRoom.textContent = \"Dummy-GENERAL\";\n  chatOnline.appendChild(currentRoom);\n\n  const onlineUsersIndicator = document.createElement(\"h6\");\n  onlineUsersIndicator.id = \"online-users-indicator\";\n  onlineUsersIndicator.textContent = \"Users in this room:\";\n  chatOnline.appendChild(onlineUsersIndicator);\n\n  const onlineUsersUl = document.createElement(\"ul\");\n  onlineUsersUl.id = \"online-users-ul\";\n  chatOnline.appendChild(onlineUsersUl);\n\n  const privateMsgInstructions = document.createElement(\"span\");\n  privateMsgInstructions.id = \"private-msg-instructions\";\n  privateMsgInstructions.textContent =\n    \"[to send a PM, type the message in the input and click the user you want to send the PM to]\";\n  chatOnline.appendChild(privateMsgInstructions);\n}\n\nexport { chatOnlineRender };\n","import { chatMessageRender } from \"./chatMessageRender\";\nimport { chatLogoRender } from \"./chatLogoRender\";\nimport { chatOnlineRender } from \"./chatOnlineRender\";\nimport { chatBoxRender } from \"./chatBoxRender\";\n\nconst containerAll = document.getElementById(\"container-all\");\n\nfunction renderChatroom(username) {\n  containerAll.innerHTML = \"\";\n\n  const chatRoom = document.createElement(\"div\");\n  chatRoom.id = \"container-chatroom\";\n  containerAll.appendChild(chatRoom);\n\n  chatBoxRender(chatRoom);\n  chatOnlineRender(chatRoom);\n  chatMessageRender(chatRoom);\n  chatLogoRender(chatRoom, username);\n}\n\nexport { renderChatroom };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Chatroom } from \"./classes/Chatroom\";\n\nlet socket = io.connect();\n\nconst containerAll = document.getElementById(\"container-all\");\nconst userNameInput = document.getElementById(\"username-input\");\nconst startForm = document.getElementById(\"start-form\");\nconst colorInput = document.getElementById(\"color-input\");\n\nconst chatRoom = new Chatroom(\"General\");\n\nstartForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n  const userName = userNameInput.value;\n  const colorValue = colorInput.value;\n\n  if (validateInput(userName)) {\n    chatRoom.setUser(userName.trim(), socket, colorValue);\n    const user = chatRoom.getUser();\n    if (user.getUserName()) {\n      chatRoom.init();\n      user.logIn();\n    }\n  } else {\n    alert(\"Username cant be empty and has to be shorter than 20 characters\");\n  }\n});\n\ncontainerAll.addEventListener(\"click\", (e) => {\n  if (e.target.id === \"submit-message-button\") {\n    e.preventDefault();\n    let messageText = document.getElementById(\"message-input\");\n    let messageTextValue = messageText.value;\n    let user = chatRoom.getUser();\n    if (messageTextValue) {\n      user.sendMessageToGeneral(messageTextValue);\n      messageText.value = \"\";\n    }\n  }\n});\n\nsocket.on(\"displayMessage\", (data) => {\n  if (chatRoom.getIsInitialized()) {\n    const msgUl = document.getElementById(\"chatbox-ul\");\n    const messageLi = document.createElement(\"li\");\n    messageLi.style.color = `${data.color}`;\n    messageLi.textContent = data.msg;\n    msgUl.appendChild(messageLi);\n  }\n});\n\nsocket.on(\"printGeneralChatUsers\", (generalChatUsers) => {\n  chatRoom.setOnlineUsers(generalChatUsers);\n  handleOnlineSection();\n});\n\nsocket.on(\"generalChatUsersDc\", (generalChatUsersDc) => {\n  chatRoom.setOnlineUsers(generalChatUsersDc);\n  handleOnlineSection();\n});\n\nsocket.on(\"private\", (message) => {\n  if (chatRoom.getIsInitialized()) {\n    const msgUl = document.getElementById(\"chatbox-ul\");\n    const messageLi = document.createElement(\"li\");\n    messageLi.textContent = message;\n    msgUl.appendChild(messageLi);\n  }\n});\n\nfunction handleOnlineSection() {\n  if (chatRoom.getIsInitialized()) {\n    const onlineUsersUl = document.getElementById(\"online-users-ul\");\n    const onlineUsers = chatRoom.getOnlineUsers();\n\n    onlineUsersUl.innerHTML = \"\"; //TODO:CHANGE THIS\n\n    onlineUsers.forEach((user) => {\n      let userNameLi = document.createElement(\"li\");\n      userNameLi.id = \"online-user-li\";\n      userNameLi.textContent = user.username;\n      onlineUsersUl.appendChild(userNameLi);\n\n      userNameLi.addEventListener(\"click\", () => {\n        const ownUser = chatRoom.getUser();\n\n        let messageText = document.getElementById(\"message-input\");\n        let messageTextValue = messageText.value;\n\n        if (messageTextValue) {\n          ownUser.sendMessageToPrivate(messageTextValue, user);\n          messageText.value = \"\";\n        }\n      });\n    });\n  }\n}\n\nfunction validateInput(input) {\n  const trimmedInput = input.trim();\n  if (trimmedInput.length > 0 && trimmedInput.length < 20) {\n    return true;\n  } else {\n    return false;\n  }\n}\n"],"names":[],"sourceRoot":""}